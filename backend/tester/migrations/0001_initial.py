# Generated by Django 5.2.4 on 2025-07-20 18:45

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import tester.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="GlobalReport",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
                ("avg_execution_time", models.FloatField(blank=True, null=True)),
                ("min_execution_time", models.FloatField(blank=True, null=True)),
                ("max_execution_time", models.FloatField(blank=True, null=True)),
                ("total_cost", models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ProfileExecution",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("execution_name", models.CharField(max_length=255)),
                (
                    "execution_type",
                    models.CharField(choices=[("tracer", "TRACER"), ("manual", "Manual")], max_length=20),
                ),
                ("sessions", models.IntegerField(blank=True, null=True)),
                ("turns_per_session", models.IntegerField(blank=True, null=True)),
                (
                    "verbosity",
                    models.CharField(
                        blank=True,
                        choices=[("normal", "Normal"), ("verbose", "Verbose (-v)"), ("debug", "Debug (-vv)")],
                        default="normal",
                        help_text="TRACER verbosity level for debugging",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("RUNNING", "Running"),
                            ("SUCCESS", "Success"),
                            ("FAILURE", "Failure"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("execution_time_minutes", models.IntegerField(blank=True, null=True)),
                ("profiles_directory", models.CharField(max_length=500)),
                ("generated_profiles_count", models.IntegerField(default=0)),
                ("tracer_stdout", models.TextField(blank=True)),
                ("tracer_stderr", models.TextField(blank=True)),
                (
                    "error_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("GRAPHVIZ_NOT_INSTALLED", "Graphviz Not Installed"),
                            ("CONNECTOR_CONNECTION", "Connector Connection Error"),
                            ("CONNECTOR_AUTHENTICATION", "Connector Authentication Error"),
                            ("CONNECTOR_CONFIGURATION", "Connector Configuration Error"),
                            ("CONNECTOR_RESPONSE", "Connector Response Error"),
                            ("LLM_ERROR", "LLM Error"),
                            ("TRACER_ERROR", "TRACER Error"),
                            ("OTHER", "Other Error"),
                        ],
                        default="",
                        help_text="Specific type of error encountered during TRACER execution.",
                        max_length=50,
                    ),
                ),
            ],
            options={
                "ordering": ["execution_type", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("email", models.EmailField(max_length=255, unique=True)),
                ("username", models.CharField(blank=True, max_length=255)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ChatbotConnector",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255)),
                (
                    "technology",
                    models.CharField(
                        choices=[
                            ("rasa", "Rasa"),
                            ("taskyto", "Taskyto"),
                            ("ada-uam", "Ada UAM"),
                            ("millionbot", "Millionbot"),
                            ("genion", "Genion"),
                            ("lola", "Lola"),
                            ("serviceform", "Serviceform"),
                            ("kuki", "Kuki"),
                            ("julie", "Julie"),
                            ("rivas_catalina", "Rivas Catalina"),
                            ("saic_malaga", "Saic Malaga"),
                        ],
                        max_length=255,
                    ),
                ),
                ("link", models.URLField(blank=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chatbot_connectors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("name", "owner")},
            },
        ),
        migrations.CreateModel(
            name="OriginalTracerProfile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("original_filename", models.CharField(max_length=255)),
                ("original_content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "execution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="original_profiles",
                        to="tester.profileexecution",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProfileReport",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
                ("avg_execution_time", models.FloatField(blank=True, null=True)),
                ("min_execution_time", models.FloatField(blank=True, null=True)),
                ("max_execution_time", models.FloatField(blank=True, null=True)),
                ("total_cost", models.FloatField(blank=True, null=True)),
                ("serial", models.CharField(max_length=255)),
                ("language", models.CharField(max_length=50)),
                ("personality", models.CharField(max_length=255)),
                ("context_details", models.JSONField()),
                ("interaction_style", models.JSONField()),
                ("number_conversations", models.IntegerField()),
                ("steps", models.IntegerField(blank=True, null=True)),
                ("all_answered", models.JSONField(blank=True, null=True)),
                (
                    "global_report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile_reports",
                        to="tester.globalreport",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Conversation",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
                ("ask_about", models.JSONField()),
                ("data_output", models.JSONField()),
                ("errors", models.JSONField()),
                ("total_cost", models.FloatField()),
                ("conversation_time", models.FloatField()),
                ("response_times", models.JSONField()),
                ("response_time_avg", models.FloatField()),
                ("response_time_max", models.FloatField()),
                ("response_time_min", models.FloatField()),
                ("interaction", models.JSONField()),
                (
                    "profile_report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conversations",
                        to="tester.profilereport",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("public", models.BooleanField(default=False)),
                (
                    "llm_model",
                    models.CharField(
                        blank=True,
                        help_text="LLM model for exploration in TRACER (e.g., gpt-4o-mini, gemini-2.0-flash)",
                        max_length=100,
                    ),
                ),
                (
                    "profile_model",
                    models.CharField(
                        blank=True,
                        help_text="LLM model to embed in generated profiles (e.g., gpt-4o-mini, gemini-2.0-flash)",
                        max_length=100,
                    ),
                ),
                (
                    "chatbot_connector",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="projects",
                        to="tester.chatbotconnector",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProfileGenerationTask",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("RUNNING", "Running"),
                            ("SUCCESS", "Success"),
                            ("FAILURE", "Failure"),
                        ],
                        default="PENDING",
                        max_length=10,
                    ),
                ),
                (
                    "stage",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("INITIALIZING", "Initializing generation"),
                            ("GENERATING_CONVERSATIONS", "Generating conversations"),
                            ("CREATING_PROFILES", "Creating profiles"),
                            ("SAVING_FILES", "Saving generated files"),
                        ],
                        max_length=25,
                    ),
                ),
                ("progress_percentage", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("error_message", models.TextField(blank=True)),
                ("conversations", models.PositiveIntegerField(default=5)),
                ("turns", models.PositiveIntegerField(default=5)),
                ("generated_file_ids", models.JSONField(default=list)),
                (
                    "celery_task_id",
                    models.CharField(blank=True, help_text="Celery task ID for progress tracking", max_length=255),
                ),
                (
                    "execution",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="generation_tasks",
                        to="tester.profileexecution",
                    ),
                ),
                ("project", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="tester.project")),
            ],
        ),
        migrations.AddField(
            model_name="profileexecution",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="profile_executions", to="tester.project"
            ),
        ),
        migrations.CreateModel(
            name="PersonalityFile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("file", models.FileField(upload_to=tester.models.upload_to_personalities)),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                ("name", models.CharField(blank=True, max_length=100)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="personality_files",
                        to="tester.project",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProjectConfig",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("user_profile", models.CharField(blank=True, max_length=255)),
                ("technology", models.CharField(blank=True, max_length=255)),
                ("connector", models.CharField(blank=True, max_length=255)),
                ("connector_parameters", models.JSONField(blank=True, null=True)),
                ("extract_path", models.CharField(blank=True, max_length=500)),
                ("execution_parameters", models.JSONField(blank=True, default=list, null=True)),
                (
                    "project",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, related_name="config", to="tester.project"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RuleFile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("file", models.FileField(upload_to=tester.models.upload_to_rules)),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                ("name", models.CharField(blank=True, max_length=100)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="rule_files", to="tester.project"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TestCase",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
                ("executed_at", models.DateTimeField(auto_now_add=True)),
                ("result", models.TextField(blank=True)),
                ("stdout", models.TextField(blank=True, help_text="Standard output from Sensei execution")),
                ("stderr", models.TextField(blank=True, help_text="Standard error from Sensei execution")),
                ("error_message", models.TextField(blank=True, help_text="Parsed error message for user display")),
                ("execution_time", models.FloatField(blank=True, null=True)),
                ("status", models.CharField(blank=True, max_length=255)),
                ("copied_files", models.JSONField(blank=True, null=True)),
                ("process_id", models.IntegerField(blank=True, null=True)),
                ("technology", models.CharField(blank=True, max_length=255)),
                (
                    "llm_model",
                    models.CharField(blank=True, help_text="LLM model used for this test execution", max_length=100),
                ),
                (
                    "llm_provider",
                    models.CharField(blank=True, help_text="LLM provider used for this test execution", max_length=20),
                ),
                ("profiles_names", models.JSONField(blank=True, null=True)),
                (
                    "celery_task_id",
                    models.CharField(blank=True, help_text="Celery task ID for progress tracking", max_length=255),
                ),
                ("total_conversations", models.IntegerField(blank=True, null=True)),
                ("executed_conversations", models.IntegerField(blank=True, null=True)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="test_cases", to="tester.project"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="globalreport",
            name="test_case",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="global_reports", to="tester.testcase"
            ),
        ),
        migrations.CreateModel(
            name="TestError",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("code", models.CharField(max_length=255)),
                ("count", models.IntegerField()),
                ("conversations", models.JSONField(blank=True, null=True)),
                (
                    "global_report",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="test_errors",
                        to="tester.globalreport",
                    ),
                ),
                (
                    "profile_report",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="test_errors",
                        to="tester.profilereport",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TestFile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("file", models.FileField(upload_to=tester.models.upload_to_execution)),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                ("name", models.CharField(blank=True, max_length=100)),
                (
                    "is_valid",
                    models.BooleanField(
                        default=False, help_text="Whether the YAML file is valid for execution in Sensei"
                    ),
                ),
                (
                    "execution",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="test_files",
                        to="tester.profileexecution",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="test_files", to="tester.project"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TracerAnalysisResult",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("report_file_path", models.CharField(blank=True, default="", max_length=500)),
                ("workflow_graph_svg_path", models.CharField(blank=True, default="", max_length=500)),
                ("workflow_graph_png_path", models.CharField(blank=True, default="", max_length=500)),
                ("workflow_graph_pdf_path", models.CharField(blank=True, default="", max_length=500)),
                ("total_interactions", models.IntegerField(default=0)),
                ("coverage_percentage", models.FloatField(blank=True, null=True)),
                ("unique_paths_discovered", models.IntegerField(default=0)),
                ("categories_count", models.IntegerField(default=0)),
                ("estimated_cost_usd", models.FloatField(default=0.0)),
                (
                    "execution",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analysis_result",
                        to="tester.profileexecution",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TypeFile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("file", models.FileField(upload_to=tester.models.upload_to_types)),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                ("name", models.CharField(blank=True, max_length=100)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="type_files", to="tester.project"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserAPIKey",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255)),
                (
                    "provider",
                    models.CharField(
                        choices=[("openai", "OpenAI"), ("gemini", "Google Gemini")], default="openai", max_length=20
                    ),
                ),
                ("api_key_encrypted", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_keys",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="project",
            name="api_key",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="projects",
                to="tester.userapikey",
            ),
        ),
        migrations.AddIndex(
            model_name="testcase",
            index=models.Index(fields=["executed_at"], name="tester_test_execute_45eeb9_idx"),
        ),
        migrations.AddIndex(
            model_name="testcase",
            index=models.Index(fields=["status"], name="tester_test_status_581c73_idx"),
        ),
        migrations.AddIndex(
            model_name="testcase",
            index=models.Index(fields=["project"], name="tester_test_project_5be522_idx"),
        ),
    ]
