services:
  db:
    image: postgres:16
    env_file:
      - ./.env.dev
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - ./.env.dev
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./.env.dev
    environment:
      - FILEVAULT_ROOT=/app/filevault
      - UV_CACHE_DIR=/app/.uv-cache
      - UV_CACHE_DIR=/app/.uv-cache
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_venv:/app/.venv
      - filevault_data_dev:/app/filevault
      - ./user-simulator:/user-simulator
    user: "1000:1000"  # Use the django user we created
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: sh -c "uv run python manage.py migrate && uv run python manage.py runserver 0.0.0.0:8000"

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./.env.dev
    environment:
      - FILEVAULT_ROOT=/app/filevault
    volumes:
      - ./backend:/app
      - backend_venv:/app/.venv
      - filevault_data_dev:/app/filevault
      - ./user-simulator:/user-simulator
    user: "1000:1000"  # Use the django user we created
    depends_on:
      rabbitmq:
        condition: service_healthy
    command: uv run celery -A senseiweb worker -l info

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data_dev:
  backend_venv:
  filevault_data_dev:  # Dedicated volume for dev filevault
