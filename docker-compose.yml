services:
  db:
    image: postgres:16
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    env_file:
      - .env
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - UV_CACHE_DIR=/app/.uv-cache
    ports:
      - "8000:8000"
    volumes:
      - filevault_data_prod:/app/filevault
      - ./user-simulator:/user-simulator
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - filevault_data_prod:/app/filevault
      - ./user-simulator:/user-simulator
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    command: uv run celery -A senseiweb worker -l info

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend

volumes:
  postgres_data:
  rabbitmq_data:
  filevault_data_prod:
