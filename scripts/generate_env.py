#!/usr/bin/env python3
"""Environment Variable Generation Script for Sensei Web.

This script generates a secure Fernet key, a Django SECRET_KEY, and sets DEBUG for encrypting sensitive data and Django configuration. It automatically creates/updates the .env file in the backend directory.
"""

import sys
from pathlib import Path

try:
    from cryptography.fernet import Fernet
except ImportError:
    print("Error: cryptography package not found!")
    print("Please install it with: pip install cryptography")
    sys.exit(1)

try:
    from django.core.management.utils import get_random_secret_key
except ImportError:
    get_random_secret_key = None


def generate_fernet_key() -> str:
    """Generate a new Fernet key."""
    return Fernet.generate_key().decode()


def generate_django_secret_key() -> str:
    """Generate a new Django SECRET_KEY using Django's built-in utility."""
    if get_random_secret_key is not None:
        return get_random_secret_key()
    print("Error: Django is not installed! Please install it with: pip install django")
    sys.exit(1)


def get_backend_dir() -> Path | None:
    """Find the backend directory relative to this script."""
    script_dir = Path(__file__).parent
    backend_dir = script_dir.parent / "backend"
    if not backend_dir.exists():
        alt_backend_dir = script_dir / "backend"
        if alt_backend_dir.exists():
            return alt_backend_dir
        print("Error: Could not find backend directory!")
        print(f"Looked for: {backend_dir} and {alt_backend_dir}")
        return None
    return backend_dir


def update_env_file(backend_dir: Path, fernet_key: str) -> bool:
    """Create or update the .env file with the Fernet key and Django secret key."""
    env_file = backend_dir / ".env"
    env_content = {}
    if env_file.exists():
        try:
            with env_file.open() as f:
                for raw_line in f:
                    line = raw_line.strip()
                    if line and not line.startswith("#") and "=" in line:
                        key, value = line.split("=", 1)
                        env_content[key] = value
        except OSError as e:
            print(f"Warning: Could not read existing .env file: {e}")
    env_content["FERNET_SECRET_KEY"] = fernet_key
    if "SECRET_KEY" not in env_content or not env_content["SECRET_KEY"]:
        env_content["SECRET_KEY"] = generate_django_secret_key()
        print("Generated new Django SECRET_KEY.")
    if "DEBUG" not in env_content:
        env_content["DEBUG"] = "True"
    try:
        with env_file.open("w") as f:
            f.write("# Sensei Web Environment Variables\n")
            f.write("# Generated by generate_env.py\n\n")
            for key, value in env_content.items():
                f.write(f"{key}={value}\n")
    except OSError as e:
        print(f"Error writing .env file: {e}")
        return False
    else:
        return True


def main() -> None:
    """Main function to generate Fernet key and update .env file."""
    print("Generating environment variables for Sensei Web...")
    backend_dir = get_backend_dir()
    if not backend_dir:
        sys.exit(1)
    print(f"Backend directory: {backend_dir}")
    try:
        fernet_key = generate_fernet_key()
        print("Fernet key generated successfully!")
    except Exception as e:
        print(f"Error generating Fernet key: {e}")
        sys.exit(1)
    env_file_path = backend_dir / ".env"
    if update_env_file(backend_dir, fernet_key):
        print(f".env file updated successfully at: {env_file_path}")
        print("\nYour Fernet key and Django SECRET_KEY have been securely stored in the .env file.")
        print("Keep this file secure and do not commit it to version control!")
    else:
        print("Failed to update .env file")
        print(f"You can manually add this to your .env file at {env_file_path}:")
        print(f"FERNET_SECRET_KEY={fernet_key}")
        sys.exit(1)
    print("\nYou can now run your Django server!")
    print("Next steps:")
    print("1. Navigate to the backend directory")
    print("2. Run: python manage.py makemigrations")
    print("3. Run: python manage.py migrate")
    print("4. Run: python manage.py runserver")


if __name__ == "__main__":
    main()
