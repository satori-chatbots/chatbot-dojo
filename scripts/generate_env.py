#!/usr/bin/env python3
"""Environment Variable Generation Script for Sensei Web.

This script generates and configures essential environment variables for the project,
such as a Fernet key for encryption and a Django SECRET_KEY.

It intelligently creates or updates the .env file in the backend directory,
ensuring that existing keys are not overwritten, which prevents data loss
and session invalidation.
"""

import sys
from pathlib import Path

try:
    from cryptography.fernet import Fernet
except ImportError:
    print("Error: The 'cryptography' package was not found.")
    print("Please install the project's dependencies first, typically with:")
    print("pip install -r requirements.txt")
    sys.exit(1)

try:
    from django.core.management.utils import get_random_secret_key
except ImportError:
    # Set to None to handle the error gracefully later.
    get_random_secret_key = None


def generate_fernet_key() -> str:
    """Generate a new, URL-safe, base64-encoded Fernet key."""
    return Fernet.generate_key().decode()


def generate_django_secret_key() -> str:
    """Generate a new Django SECRET_KEY using Django's built-in utility."""
    if get_random_secret_key:
        return get_random_secret_key()

    print("Error: Django does not appear to be installed.")
    print("Please install the project's dependencies first, typically with:")
    print("pip install -r requirements.txt")
    sys.exit(1)


def get_backend_dir() -> Path:
    """Find and return the path to the 'backend' directory."""
    script_dir = Path(__file__).resolve().parent
    # Common project structures: script inside project root or inside a 'scripts' folder
    potential_paths = [
        script_dir / "backend",
        script_dir.parent / "backend",
    ]
    for path in potential_paths:
        if path.is_dir():
            return path

    print("Error: Could not locate the 'backend' directory.")
    print(f"Searched in: {[str(p) for p in potential_paths]}")
    sys.exit(1)


def read_env_file(env_file: Path) -> dict:
    """Read existing .env file and return its content as a dictionary."""
    env_content = {}
    try:
        with env_file.open("r") as f:
            for line in f:
                stripped_line = line.strip()
                if stripped_line and not stripped_line.startswith("#") and "=" in stripped_line:
                    key, value = stripped_line.split("=", 1)
                    env_content[key.strip()] = value.strip()
    except OSError as e:
        print(f"Warning: Could not read existing .env file: {e}")
    return env_content


def write_env_file(env_file: Path, env_content: dict) -> bool:
    """Write the environment variables to the .env file."""
    try:
        with env_file.open("w") as f:
            f.write("# Sensei Web Environment Variables\n")
            f.write("# Generated by the environment setup script\n\n")
            for key, value in env_content.items():
                f.write(f"{key}={value}\n")
    except OSError as e:
        print(f"Error: Failed to write to .env file: {e}")
        return False
    else:
        return True


def update_env_file(backend_dir: Path) -> bool:
    """Create or update the .env file with necessary keys."""
    env_file = backend_dir / ".env"
    env_content = read_env_file(env_file) if env_file.exists() else {}
    keys_generated = False

    if not env_content.get("FERNET_SECRET_KEY"):
        print("Generating a new Fernet key...")
        env_content["FERNET_SECRET_KEY"] = generate_fernet_key()
        keys_generated = True

    if not env_content.get("SECRET_KEY"):
        print("Generating a new Django SECRET_KEY...")
        env_content["SECRET_KEY"] = generate_django_secret_key()
        keys_generated = True

    if "DEBUG" not in env_content:
        env_content["DEBUG"] = "True"

    if not keys_generated and env_file.exists():
        print("All necessary keys already exist. No changes made.")
        return True

    return write_env_file(env_file, env_content)


def main() -> None:
    """Main function to orchestrate environment setup."""
    print("--- Sensei Web Environment Setup ---")
    backend_dir = get_backend_dir()
    print(f"Targeting backend directory: {backend_dir}")

    if update_env_file(backend_dir):
        print("\n.env file is configured successfully.")
        print("Keep this file secure and do not commit it to version control!")
        print("\n--- Next Steps ---")
        print("1. Navigate to the backend directory: cd", backend_dir)
        print("2. Apply database migrations: python manage.py migrate")
        print("3. Start the development server: python manage.py runserver")
    else:
        print("\nEnvironment setup failed.")
        sys.exit(1)


if __name__ == "__main__":
    main()
