#!/usr/bin/env python3
"""Fernet Key Generation Script for Sensei Web

This script generates a secure Fernet key for encrypting sensitive data
and automatically creates/updates the .env file in the backend directory.
"""

import sys
from pathlib import Path

try:
    from cryptography.fernet import Fernet
except ImportError:
    print("Error: cryptography package not found!")
    print("Please install it with: pip install cryptography")
    sys.exit(1)


def generate_fernet_key():
    """Generate a new Fernet key."""
    return Fernet.generate_key().decode()


def get_backend_dir():
    """Find the backend directory relative to this script."""
    script_dir = Path(__file__).parent
    backend_dir = script_dir.parent / "backend"

    if not backend_dir.exists():
        # Try alternative paths
        alt_backend_dir = script_dir / "backend"
        if alt_backend_dir.exists():
            return alt_backend_dir
        print("Error: Could not find backend directory!")
        print(f"Looked for: {backend_dir} and {alt_backend_dir}")
        return None

    return backend_dir


def update_env_file(backend_dir, fernet_key):
    """Create or update the .env file with the Fernet key."""
    env_file = backend_dir / ".env"

    # Read existing .env file if it exists
    env_content = {}
    if env_file.exists():
        try:
            with open(env_file) as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith("#") and "=" in line:
                        key, value = line.split("=", 1)
                        env_content[key] = value
        except Exception as e:
            print(f"Warning: Could not read existing .env file: {e}")

    # Update with new Fernet key
    env_content["FERNET_SECRET_KEY"] = fernet_key

    # Add other common environment variables if they don't exist
    if "DEBUG" not in env_content:
        env_content["DEBUG"] = "True"

    if "SECRET_KEY" not in env_content:
        print(
            "Note: You should set a Django SECRET_KEY in your .env file for production use"
        )

    # Write the updated .env file
    try:
        with open(env_file, "w") as f:
            f.write("# Sensei Web Environment Variables\n")
            f.write("# Generated by generate_fernet_key.py\n\n")

            for key, value in env_content.items():
                f.write(f"{key}={value}\n")

        return True
    except Exception as e:
        print(f"Error writing .env file: {e}")
        return False


def main():
    """Main function to generate Fernet key and update .env file."""
    print("Generating Fernet key for Sensei Web...")

    # Find backend directory
    backend_dir = get_backend_dir()
    if not backend_dir:
        sys.exit(1)

    print(f"Backend directory: {backend_dir}")

    # Generate new Fernet key
    try:
        fernet_key = generate_fernet_key()
        print("Fernet key generated successfully!")
    except Exception as e:
        print(f"Error generating Fernet key: {e}")
        sys.exit(1)

    # Update .env file
    env_file_path = backend_dir / ".env"
    if update_env_file(backend_dir, fernet_key):
        print(f".env file updated successfully at: {env_file_path}")
        print("\nYour Fernet key has been securely stored in the .env file.")
        print("Keep this file secure and do not commit it to version control!")
    else:
        print("Failed to update .env file")
        print(f"You can manually add this to your .env file at {env_file_path}:")
        print(f"FERNET_SECRET_KEY={fernet_key}")
        sys.exit(1)

    print("\nYou can now run your Django server!")
    print("Next steps:")
    print("1. Navigate to the backend directory")
    print("2. Run: python manage.py makemigrations")
    print("3. Run: python manage.py migrate")
    print("4. Run: python manage.py runserver")


if __name__ == "__main__":
    main()
